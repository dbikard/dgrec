"""We define all the usefull functions to evolve a bad TR to a good TR"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/06_evolution.ipynb.

# %% auto 0
__all__ = ['synonymous_mutation', 'translate_dna_to_protein', 'synonymous_mutation_list', 'framing_TR',
           'evolution_synonymous_TR_forward_GENE_forward']

# %% ../nbs/API/06_evolution.ipynb 2
def synonymous_mutation(sequence):
    """
    Generates synonymous mutations for a given DNA sequence.

    Parameters:
        sequence (str): The input DNA sequence.

    Returns:
        list: A list of synonymous mutant sequences.
    """
    # Define the genetic code (mapping codons to amino acids)
    genetic_code = {
        'TTT': 'F', 'TTC': 'F', 'TTA': 'L', 'TTG': 'L',
        'TCT': 'S', 'TCC': 'S', 'TCA': 'S', 'TCG': 'S',
        'TAT': 'Y', 'TAC': 'Y', 'TAA': '*', 'TAG': '*',
        'TGT': 'C', 'TGC': 'C', 'TGA': '*', 'TGG': 'W',
        'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L',
        'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'CAT': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'ATT': 'I', 'ATC': 'I', 'ATA': 'I', 'ATG': 'M',
        'ACT': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',
        'AAT': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',
        'AGT': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',
        'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V',
        'GCT': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
        'GAT': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',
        'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'
    }

    mutant_sequences = [sequence]

    # Iterate over the input sequence in triplets (codons)
    for i in range(0, len(sequence), 3):
        codon = sequence[i:i+3]
        # print(codon)

        # Iterate over all possible mutations of the codon
        for j in range(3):
            for base in 'ACGT':
                if base != codon[j]:
                    mutated_codon = codon[:j] + base + codon[j+1:]
                    # Check if mutation results in the same amino acid
                    if genetic_code[codon] == genetic_code.get(mutated_codon, ''):
                        mutant_sequence = sequence[:i] + mutated_codon + sequence[i+3:]
                        mutant_sequences.append(mutant_sequence)

    return mutant_sequences


# %% ../nbs/API/06_evolution.ipynb 3
def translate_dna_to_protein(dna_sequence):
    codon_table = {
        'ATA': 'I', 'ATC': 'I', 'ATT': 'I', 'ATG': 'M',
        'ACA': 'T', 'ACC': 'T', 'ACG': 'T', 'ACT': 'T',
        'AAC': 'N', 'AAT': 'N', 'AAA': 'K', 'AAG': 'K',
        'AGC': 'S', 'AGT': 'S', 'AGA': 'R', 'AGG': 'R',
        'CTA': 'L', 'CTC': 'L', 'CTG': 'L', 'CTT': 'L',
        'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCT': 'P',
        'CAC': 'H', 'CAT': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'CGA': 'R', 'CGC': 'R', 'CGG': 'R', 'CGT': 'R',
        'GTA': 'V', 'GTC': 'V', 'GTG': 'V', 'GTT': 'V',
        'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCT': 'A',
        'GAC': 'D', 'GAT': 'D', 'GAA': 'E', 'GAG': 'E',
        'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGT': 'G',
        'TCA': 'S', 'TCC': 'S', 'TCG': 'S', 'TCT': 'S',
        'TTC': 'F', 'TTT': 'F', 'TTA': 'L', 'TTG': 'L',
        'TAC': 'Y', 'TAT': 'Y', 'TAA': '*', 'TAG': '*',
        'TGC': 'C', 'TGT': 'C', 'TGA': '*', 'TGG': 'W',
    }
    
    protein_sequence = ''
    
    for i in range(0, len(dna_sequence), 3):
        codon = dna_sequence[i:i+3]
        if codon in codon_table:
            protein_sequence += codon_table[codon]
        else:
            protein_sequence += 'X'  # Placeholder for unknown codons
    
    return protein_sequence

# %% ../nbs/API/06_evolution.ipynb 4
def synonymous_mutation_list(seq_list):
    syn_list=[]
    for seq in seq_list:
        syn_list.extend(synonymous_mutation(seq))
    return syn_list

# %% ../nbs/API/06_evolution.ipynb 5
def framing_TR(gene,list_TR):
   
    start_frame_list=[]
    end_frame_list=[]
    base_start_list=[]
    base_end_list=[]
    extended_TR_list=[]
    for k in list_TR:
        TR_size=len(k)
        start_position=gene.index(k)+1
        end_position=start_position+TR_size-1
        # print(start_position,end_position)
        if start_position%3==1:
            start_frame=0
        elif start_position%3==2:
            start_frame=1
        elif start_position%3==0:
            start_frame=2
        if end_position%3==1:
            end_frame=2
        elif end_position%3==2:
            end_frame=1
        elif end_position%3==0:
            end_frame=0

        base_start=gene[start_position-1-start_frame:start_position-1]
        base_end=gene[end_position:end_position+end_frame]
        extended_TR=base_start+k+base_end
        
        start_frame_list.append(start_frame)
        end_frame_list.append(end_frame)
        base_start_list.append(base_start)
        base_end_list.append(base_end)
        extended_TR_list.append(extended_TR)
        
    return (start_frame_list,end_frame_list,base_start_list,base_end_list,extended_TR_list)

# %% ../nbs/API/06_evolution.ipynb 6
def evolution_synonymous_TR_forward_GENE_forward(TR,gene,iteration_max,score_goal,model):
    len_DNA=len(TR)
    # print(len_DNA)
    X_0=double_encode([TR])
    score_0 = model.predict_proba(X_0)[:,1]    
    print('Round 0','Score =',np.round(score_0[0],decimals=2))
    history_mutants=[[TR]]

    n_base_to_add_start=framing_TR(gene,[TR])[0][0]
    n_base_to_add_end=framing_TR(gene,[TR])[1][0]    
    base_to_add_start=framing_TR(gene,[TR])[2][0]
    base_to_add_end=framing_TR(gene,[TR])[3][0]
    extended_gene=framing_TR(gene,[TR])[4][0]
    
    # print('base_to_add_start',base_to_add_start,'base_to_add_end',base_to_add_end)

    DNA_sequence=[TR]

    score_best=score_0
    iteration=0

    # for k in range (iteration_max):
    while (score_best<score_goal) and (iteration<iteration_max):
        #1 Putting the DNA sequence in frame
        in_frame_DNA_sequence=[base_to_add_start+seq+base_to_add_end for seq in DNA_sequence]
        print(len(in_frame_DNA_sequence[0]))


        #3 Generation all the synonymous mutants of the in frame DNA sequence
        mutant_list_in_frame=synonymous_mutation_list(in_frame_DNA_sequence)

        #5 Restoring the outframe DNA sequence 
        out_frame_mutant_list_forward=[seq[n_base_to_add_start:len_DNA+n_base_to_add_start] for seq in mutant_list_in_frame]

        #6 Scoring the different sequences
        X = double_encode(out_frame_mutant_list_forward)
        score = model.predict_proba(X)[:,1]

        #7 Taking only the best sequences
        score_best=np.mean(np.sort(score)[-3:])  
        print('Round =',iteration+1,'Best Score=',np.round(score_best,decimals=2))
    
        df=pd.DataFrame({'Sequence':out_frame_mutant_list_forward,'Score':score })
        df_best=df.sort_values(by='Score',ascending=False).iloc[:5]
        
        DNA_sequence=list(df_best['Sequence'])
        history_mutants.append(DNA_sequence)

        # colored_mismatch=[]
        # print(DNA_sequence)
        # for j in DNA_sequence:
        #     print(show_mismatches(TR,j)[0])
        #     print(show_mismatches(TR,j)[1])
        #     print('------')
        iteration+=1

    return df_best

